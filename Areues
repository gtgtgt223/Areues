local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "To get a license key to aureues.cc please add 2mceb on discord I will also do free keys for a month",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"zX7p9mV2c3YkQ", "Owneraccesskey"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image

 local VisualsTab = Window:CreateTab("Visuals", 4483362458) -- Title, Image

 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 local Button = VisualsTab:CreateButton({
    Name = "Highlight ESP",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        
        local function highlightPlayers()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    local character = player.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local highlight = Instance.new("Highlight")
                        highlight.Adornee = character
                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                        highlight.Parent = character
                    end
                end
            end
        end
        
        highlightPlayers()
        
        Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(character)
                local highlight = Instance.new("Highlight")
                highlight.Adornee = character
                highlight.FillColor = Color3.fromRGB(255, 0, 0)
                highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                highlight.Parent = character
            end)
        end)
    end,
 })

 local Button = MainTab:CreateButton({
    Name = "Aimbot",
    Callback = function()
        local Players = game:GetService("Players")
        local UserInputService = game:GetService("UserInputService")
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        
        local aimbotEnabled = false
        local targetPlayer = nil
        
        local function getClosestPlayer()
            local closestPlayer = nil
            local closestDistance = math.huge
        
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local screenPosition, onScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                    if onScreen then
                        local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - UserInputService:GetMouseLocation()).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        
            return closestPlayer
        end
        
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.Q then
                aimbotEnabled = not aimbotEnabled
                if aimbotEnabled then
                    targetPlayer = getClosestPlayer()
                else
                    targetPlayer = nil
                end
            end
        end)
        
        game:GetService("RunService").RenderStepped:Connect(function()
            if aimbotEnabled and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
            end
        end)
        
        
    end,
 })

 local Button = PlayerTab:CreateButton({
    Name = "Gravity",
    Callback = function()
        workspace.Gravity = 100
    end,
 })

 local Button = PlayerTab:CreateButton({
    Name = "JumpPower",
    Callback = function()
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 150
    end,
 })

 local Slider = PlayerTab:CreateSlider({
    Name = "Walkspeed Slider",
    Range = {3, 100},
    Increment = 10,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
    -- The variable (Value) is a number which correlates to the value the slider is currently at
    end,
 })

 local Button = PlayerTab:CreateButton({
    Name = "Noclip",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local noclip = false
        
        local function toggleNoclip()
            noclip = not noclip
            while noclip do
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                wait()
            end
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        
        local function onInputBegan(input, gameProcessed)
            if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                if input.KeyCode == Enum.KeyCode.N then
                    toggleNoclip()
                end
            end
        end
        
        game:GetService("UserInputService").InputBegan:Connect(onInputBegan)
    end,
 })

 local Button = VisualsTab:CreateButton({
    Name = "Tracers",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Mouse = LocalPlayer:GetMouse()
        local Camera = workspace.CurrentCamera
        
        
        local function createTracer()
            local tracer = Drawing.new("Line")
            tracer.Thickness = 2
            tracer.Color = Color3.new(1, 0, 0)
            return tracer
        end
        
        
        local tracers = {}
        
        
        local function updateTracers()
            for player, tracer in pairs(tracers) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = player.Character.HumanoidRootPart
                    local screenPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
        
                    if onScreen then
                        tracer.From = Vector2.new(Mouse.X, Mouse.Y)
                        tracer.To = Vector2.new(screenPosition.X, screenPosition.Y)
                        tracer.Visible = true
                    else
                        tracer.Visible = false
                    end
                else
                    tracer.Visible = false
                end
            end
        end
        
        
        local function onPlayerRemoving(player)
            if tracers[player] then
                tracers[player]:Remove()
                tracers[player] = nil
            end
        end
        
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                tracers[player] = createTracer()
            end
        end
        
        
        Players.PlayerRemoving:Connect(onPlayerRemoving)
        
        
        Players.PlayerAdded:Connect(function(player)
            if player ~= LocalPlayer then
                tracers[player] = createTracer()
            end
        end)
        
        
        game:GetService("RunService").RenderStepped:Connect(updateTracers)
        
    end,
 })

 local Button = PlayerTab:CreateButton({
    Name = "Infinite jump",
    Callback = function()
        local InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
        if InfiniteJumpEnabled then
        game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
        end)
    end,
 })

 local Button = PlayerTab:CreateButton({
    Name = "Spinbot",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local runService = game:GetService("RunService")
        local spinSpeed = 50
        
        runService.RenderStepped:Connect(function(deltaTime)
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
            end
        end)
    end,
 })
