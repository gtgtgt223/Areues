local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Player = game.Players.LocalPlayer
local Window = OrionLib:MakeWindow({Name = "Key system", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})


OrionLib:MakeNotification({
	Name = "Logged in!",
	Content = "You are logged in as "..Player.Name..".",
	Image = "rbxassetid://4483345998",
	Time = 5
})

_G.Key = "zX7p9mV2c3YkQ"
_G.KeyInput = "string"

function MakeScriptHub()
    local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Areues.cc", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})


OrionLib:MakeNotification({
	Name = "Loaded!",
	Content = "Loaded!",
	Image = "rbxassetid://4483345998",
	Time = 5
})

local MainTab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local PlayerTab = Window:MakeTab({
	Name = "Player",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local VisualsTab = Window:MakeTab({
	Name = "Visuals",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})



VisualsTab:AddButton({
	Name = "ESP",
	Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        
        local function highlightPlayers()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    local character = player.Character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local highlight = Instance.new("Highlight")
                        highlight.Adornee = character
                        highlight.FillColor = Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                        highlight.Parent = character
                    end
                end
            end
        end
        
        highlightPlayers()
        
        Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(character)
                local highlight = Instance.new("Highlight")
                highlight.Adornee = character
                highlight.FillColor = Color3.fromRGB(255, 0, 0)
                highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                highlight.Parent = character
            end)
        end)
        
        
  	end    
})



PlayerTab:AddSlider({
	Name = "Walkspeed Slider",
	Min = 3,
	Max = 2000,
	Default = 16,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed",
	Callback = function(Value)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
	end    
})

MainTab:AddButton({
	Name = "Aimbot",
	Callback = function()
        local Players = game:GetService("Players")
        local UserInputService = game:GetService("UserInputService")
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        
        local aimbotEnabled = false
        local targetPlayer = nil
        
        local function getClosestPlayer()
            local closestPlayer = nil
            local closestDistance = math.huge
        
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local screenPosition, onScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                    if onScreen then
                        local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - UserInputService:GetMouseLocation()).Magnitude
                        if distance < closestDistance then
                            closestDistance = distance
                            closestPlayer = player
                        end
                    end
                end
            end
        
            return closestPlayer
        end
        
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.Q then
                aimbotEnabled = not aimbotEnabled
                if aimbotEnabled then
                    targetPlayer = getClosestPlayer()
                else
                    targetPlayer = nil
                end
            end
        end)
        
        game:GetService("RunService").RenderStepped:Connect(function()
            if aimbotEnabled and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
            end
        end)
        
        
  	end    
})

PlayerTab:AddButton({
	Name = "Noclip",
	Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local noclip = false
        
        local function toggleNoclip()
            noclip = not noclip
            while noclip do
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                wait()
            end
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        
        local function onInputBegan(input, gameProcessed)
            if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                if input.KeyCode == Enum.KeyCode.N then
                    toggleNoclip()
                end
            end
        end
        
        game:GetService("UserInputService").InputBegan:Connect(onInputBegan)
        
        
  	end    
})

PlayerTab:AddButton({
	Name = "Gravity",
	Callback = function()
      		workspace.Gravity = 100
  	end    
})


MainTab:AddButton({
	Name = "Infinite jump",
	Callback = function()
        local InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
        if InfiniteJumpEnabled then
        game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
        end)
  	end    
})

VisualsTab:AddButton({
	Name = "Tracers",
	Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local Mouse = LocalPlayer:GetMouse()
        local Camera = workspace.CurrentCamera
        
        
        local function createTracer()
            local tracer = Drawing.new("Line")
            tracer.Thickness = 2
            tracer.Color = Color3.new(1, 0, 0)
            return tracer
        end
        
        
        local tracers = {}
        
        
        local function updateTracers()
            for player, tracer in pairs(tracers) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = player.Character.HumanoidRootPart
                    local screenPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
        
                    if onScreen then
                        tracer.From = Vector2.new(Mouse.X, Mouse.Y)
                        tracer.To = Vector2.new(screenPosition.X, screenPosition.Y)
                        tracer.Visible = true
                    else
                        tracer.Visible = false
                    end
                else
                    tracer.Visible = false
                end
            end
        end
        
        
        local function onPlayerRemoving(player)
            if tracers[player] then
                tracers[player]:Remove()
                tracers[player] = nil
            end
        end
        
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                tracers[player] = createTracer()
            end
        end
        
        
        Players.PlayerRemoving:Connect(onPlayerRemoving)
        
        
        Players.PlayerAdded:Connect(function(player)
            if player ~= LocalPlayer then
                tracers[player] = createTracer()
            end
        end)
        
        
        game:GetService("RunService").RenderStepped:Connect(updateTracers)
        
  	end    
})


MainTab:AddButton({
	Name = "Spinbot",
	Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local runService = game:GetService("RunService")
        local spinSpeed = 5
        
        runService.RenderStepped:Connect(function(deltaTime)
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
            end
        end)
        
  	end    
})
end

local Tab = Window:MakeTab({
	Name = "Key",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = "Enter key",
	Default = "",
	TextDisappear = true,
	Callback = function(Value)
		_G.KeyInput = Value
	end	  
})

Tab:AddButton({
	Name = "Check Key",
	Callback = function()
      	if _G.KeyInput == _G.Key then
        MakeScriptHub()
        end
  	end    
})
